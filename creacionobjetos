create database if not exists mesa_de_entradas_DGAOS_NUEVA;

use mesa_de_entradas_DGAOS_NUEVA;

create table if not exists carpeta(
	id_carpeta int primary key not null unique auto_increment,
    nombre_carpeta varchar(40) not null unique
    );
    
create table if not exists tipo_acto_administrativo(
	id_tipo_acto_administrativo int primary key not null unique auto_increment,
    nombre_tipo_acto_administrativo varchar(24) not null unique
    );

create table if not exists acto_administrativo(
	id_acto_administrativo int primary key not null unique auto_increment,
    id_tipo_acto_administrativo int not null,
    numero_acto_administrativo varchar(24) not null,
    FOREIGN KEY (id_tipo_acto_administrativo) REFERENCES tipo_acto_administrativo(id_tipo_acto_administrativo)
    );

create table if not exists sector(
	id_sector int primary key not null unique auto_increment,
    nombre_sector varchar(24) not null unique
    );

create table if not exists agente(
	id_agente int primary key not null unique auto_increment,
    id_sector int not null,
    nombre_agente varchar(40) not null,
    FOREIGN KEY (id_sector) REFERENCES sector(id_sector)
    );

create table if not exists departamento_judicial(
	id_departamento_judicial int primary key not null unique auto_increment,
    nombre_departamento_judicial varchar(24) not null unique
    );

create table if not exists distritos_por_deptojudicial(
	id_distritos_por_deptojudicial int primary key not null unique auto_increment,
    id_departamento_judicial int not null,
    nombre_distrito varchar(60) not null,
    FOREIGN KEY (id_departamento_judicial) REFERENCES departamento_judicial(id_departamento_judicial)
    );

create table if not exists tipo_documento(
	id_tipo_documento int primary key not null unique auto_increment,
    nombre_tipo_documento varchar(40) not null unique
    );

create table if not exists origen_destino(
	id_origen_destino int primary key not null unique auto_increment,
    nombre_origen_destino varchar(85) not null unique
    );

create table if not exists forma_ingreso(
	id_forma_ingreso int primary key not null unique auto_increment,
    nombre_forma_ingreso varchar(24) not null unique
    );
    
create table if not exists facsimil_ingreso(
	id_facsimiling int primary key not null unique auto_increment,
    ruta_facsimil varchar(100)
    );

create table if not exists trg_bitacora_facsimil (
id_bitacora_facsimil int not null auto_increment,
fecha datetime not null,
usuario_id varchar(45),
old_ruta_facsimil varchar (100),
new_ruta_facsimil varchar (100),
tipo_operacion varchar(45),
primary key(id_bitacora_facsimil));

create table if not exists maestro_mesa_entradas(
	id_ingreso int primary key not null unique auto_increment,
    id_forma_ingreso int,
    FOREIGN KEY (id_forma_ingreso) REFERENCES forma_ingreso(id_forma_ingreso),
    id_origen int,
    FOREIGN KEY (id_origen) REFERENCES origen_destino(id_origen_destino),
    facsimil_ingreso varchar(100),
    id_tipo_documento int not null,
    FOREIGN KEY (id_tipo_documento) REFERENCES tipo_documento(id_tipo_documento),
    nro_documento varchar(24),
    id_distritos_por_deptojudicial int not null,
    FOREIGN KEY (id_distritos_por_deptojudicial) REFERENCES distritos_por_deptojudicial(id_distritos_por_deptojudicial),
    detalle_documento text not null,
    id_sector_asignado int not null,
    FOREIGN KEY (id_sector_asignado) REFERENCES sector(id_sector),
    id_responsable int not null,
    FOREIGN KEY (id_responsable) REFERENCES agente(id_agente),
    id_acto_administrativo_asociado int,
    FOREIGN KEY (id_acto_administrativo_asociado) REFERENCES acto_administrativo(id_acto_administrativo),
    id_salida int,
    id_destino int,
    FOREIGN KEY (id_destino) REFERENCES origen_destino(id_origen_destino),
    facsimil_salida varchar(100),
    id_carpeta int not null,
    FOREIGN KEY (id_carpeta) REFERENCES carpeta(id_carpeta)
    );
    
    create table if not exists backup_ingreso_maestro_mesa_entradas(
	id_ingreso int primary key not null unique,
    id_forma_ingreso int,
    FOREIGN KEY (id_forma_ingreso) REFERENCES forma_ingreso(id_forma_ingreso),
    id_origen int,
    FOREIGN KEY (id_origen) REFERENCES origen_destino(id_origen_destino),
    facsimil_ingreso varchar(100),
    id_tipo_documento int not null,
    FOREIGN KEY (id_tipo_documento) REFERENCES tipo_documento(id_tipo_documento),
    nro_documento varchar(24),
    id_distritos_por_deptojudicial int not null,
    FOREIGN KEY (id_distritos_por_deptojudicial) REFERENCES distritos_por_deptojudicial(id_distritos_por_deptojudicial),
    detalle_documento text not null,
    id_sector_asignado int not null,
    FOREIGN KEY (id_sector_asignado) REFERENCES sector(id_sector),
    id_responsable int not null,
    FOREIGN KEY (id_responsable) REFERENCES agente(id_agente),
    id_acto_administrativo_asociado int,
    FOREIGN KEY (id_acto_administrativo_asociado) REFERENCES acto_administrativo(id_acto_administrativo),
    id_salida int,
    id_destino int,
    FOREIGN KEY (id_destino) REFERENCES origen_destino(id_origen_destino),
    facsimil_salida varchar(100),
    id_carpeta int not null,
    FOREIGN KEY (id_carpeta) REFERENCES carpeta(id_carpeta)
    );
    
    create table if not exists backup_resgistrosborrados_maestro_mesa_entradas(
	id_ingreso int primary key not null unique,
    id_forma_ingreso int,
    FOREIGN KEY (id_forma_ingreso) REFERENCES forma_ingreso(id_forma_ingreso),
    id_origen int,
    FOREIGN KEY (id_origen) REFERENCES origen_destino(id_origen_destino),
    facsimil_ingreso varchar(100),
    id_tipo_documento int not null,
    FOREIGN KEY (id_tipo_documento) REFERENCES tipo_documento(id_tipo_documento),
    nro_documento varchar(24),
    id_distritos_por_deptojudicial int not null,
    FOREIGN KEY (id_distritos_por_deptojudicial) REFERENCES distritos_por_deptojudicial(id_distritos_por_deptojudicial),
    detalle_documento text not null,
    id_sector_asignado int not null,
    FOREIGN KEY (id_sector_asignado) REFERENCES sector(id_sector),
    id_responsable int not null,
    FOREIGN KEY (id_responsable) REFERENCES agente(id_agente),
    id_acto_administrativo_asociado int,
    FOREIGN KEY (id_acto_administrativo_asociado) REFERENCES acto_administrativo(id_acto_administrativo),
    id_salida int,
    id_destino int,
    FOREIGN KEY (id_destino) REFERENCES origen_destino(id_origen_destino),
    facsimil_salida varchar(100),
    id_carpeta int not null,
    FOREIGN KEY (id_carpeta) REFERENCES carpeta(id_carpeta)
    );


create view vw_general_movimiento as 
select
	maestro_mesa_entradas.id_ingreso as ingreso,
    forma_ingreso.nombre_forma_ingreso as forma,
    origen_destino.nombre_origen_destino as origen,
    tipo_documento.nombre_tipo_documento as tipo_documento,
    maestro_mesa_entradas.nro_documento as numero,
    maestro_mesa_entradas.detalle_documento as detalle,
    sector.nombre_sector as sector,
    agente.nombre_agente as responsable,
    maestro_mesa_entradas.id_salida as nro_salida,
    maestro_mesa_entradas.id_destino as destino,
    carpeta.nombre_carpeta as carpeta

from 
	(maestro_mesa_entradas
    join forma_ingreso on (maestro_mesa_entradas.id_forma_ingreso = forma_ingreso.id_forma_ingreso)
    join origen_destino on (maestro_mesa_entradas.id_origen = origen_destino.id_origen_destino)
    join tipo_documento on (maestro_mesa_entradas.id_tipo_documento = tipo_documento.id_tipo_documento)
    join sector on (maestro_mesa_entradas.id_sector_asignado = id_sector)
    join agente on (maestro_mesa_entradas.id_responsable = id_agente)
    join carpeta on (maestro_mesa_entradas.id_carpeta = carpeta.id_carpeta)
    );
    
    create view vw_contador_tramites as

select count(id_ingreso) as cantidad_tramites from maestro_mesa_entradas
;

create view vw_contador_movimiento_destino as

select
	origen_destino.nombre_origen_destino as nombre_destino,
    vw_general_movimiento.destino,
    count(destino) as contador

from 
	(vw_general_movimiento
    join origen_destino on (vw_general_movimiento.destino = origen_destino.id_origen_destino))
    group by origen_destino.nombre_origen_destino;

create view vw_cantidad_tramites_sector as

select sector, count(ingreso) as contador from vw_general_movimiento
group by sector;

create view vw_cantidad_tramites_agente as

select responsable, count(ingreso) as contador from vw_general_movimiento
group by responsable;

create view vw_sector_por_agente as

select 
	agente.id_agente as id,
    sector.nombre_sector as sector,
    agente.nombre_agente as agente

from
	(agente
    join sector on (agente.id_sector = sector.id_sector));
    
    
    delimiter // 

create function ver_nombre (id int) returns varchar (150)
deterministic
begin
	declare nombre varchar (150);
    set nombre = (select nombre_agente from mesa_de_entradas_dgaos_nueva.agente where id_agente= id);
    return nombre;
    end;
    //

DELIMITER //

CREATE FUNCTION sector_del_agente (ingrese_id_agente int) returns varchar(255)
deterministic
begin
	declare respuesta varchar(255);
    set respuesta = (select	sector from vw_sector_por_agente where id=ingrese_id_agente);
	return respuesta;
    end;
    //
    
DELIMITER //

create procedure check_duplicado (in facsimil_entrada varchar(100))
begin
	if (select count(*) from facsimil_ingreso where ruta_facsimil=facsimil_entrada)>0 then
    select 0;
    else
    insert into facsimil_ingreso values (id_facsimiling, facsimil_entrada);
    end if;
 end//


DELIMITER $$
CREATE PROCEDURE sp_ordenar_tabla( IN campo VARCHAR(255) , IN tipo_ordenamiento ENUM('ASC' ,'DESC',''), IN tabla VARCHAR(200) )
BEGIN
    
    IF campo != '' THEN
		SET @ordenar = CONCAT(' ORDER BY ' , campo);
	ELSE
		SET @ordenar = '';
	END IF;
    
    IF tipo_ordenamiento != '' THEN
		SET @tipo = CONCAT(' ' , tipo_ordenamiento); -- ' DESC'
	ELSE
		SET @tipo = '';
	END IF;
    
    SET @clausula_orden = CONCAT('SELECT * FROM ', tabla ,@ordenar,@tipo);
    
    PREPARE runSQL FROM @clausula_orden;
    EXECUTE runSQL;
    DEALLOCATE PREPARE runSQL;
    
END $$
DELIMITER ;

create trigger backup_ingreso_maestro 
after insert on maestro_mesa_entradas 
for each row 
insert into backup_ingreso_maestro_mesa_entradas (id_ingreso, id_forma_ingreso, id_origen, facsimil_ingreso, id_tipo_documento, nro_documento, 
			id_distritos_por_deptojudicial, detalle_documento, id_sector_asignado, id_responsable, id_acto_administrativo_asociado,
            id_salida, id_destino, facsimil_salida, id_carpeta) values(new.id_ingreso, new.id_forma_ingreso, new.id_origen, new.facsimil_ingreso, 
            new.id_tipo_documento, new.nro_documento, new.id_distritos_por_deptojudicial, new.detalle_documento, new.id_sector_asignado,
            new.id_responsable, new.id_acto_administrativo_asociado, new.id_salida, new.id_destino, new.facsimil_salida, new.id_carpeta);

DELIMITER //                            
create trigger backup_registrosborrados_maestro
before delete on maestro_mesa_entradas
for each row
begin 
insert into backup_resgistrosborrados_maestro_mesa_entradas (id_ingreso, id_forma_ingreso, id_origen, facsimil_ingreso, id_tipo_documento, nro_documento, 
			id_distritos_por_deptojudicial, detalle_documento, id_sector_asignado, id_responsable, id_acto_administrativo_asociado,
            id_salida, id_destino, facsimil_salida, id_carpeta) values(old.id_ingreso, old.id_forma_ingreso, old.id_origen, old.facsimil_ingreso, 
            old.id_tipo_documento, old.nro_documento, old.id_distritos_por_deptojudicial, old.detalle_documento, old.id_sector_asignado,
            old.id_responsable, old.id_acto_administrativo_asociado, old.id_salida, old.id_destino, old.facsimil_salida, old.id_carpeta);
end
//
    
create trigger bitacora_actualizaciones_facsimil 
after update on facsimil_ingreso
for each row
insert into trg_bitacora_facsimil (fecha,usuario_id,old_ruta_facsimil,new_ruta_facsimil,tipo_operacion)
values
(now(),session_user(),OLD.ruta_facsimil,NEW.ruta_facsimil,'se actualiza dato');

DELIMITER //
create trigger bitacora_registros_borrados_facsimil
before delete on facsimil_ingreso
for each row
begin 
insert into trg_bitacora_facsimil
(fecha,usuario_id,old_ruta_facsimil,tipo_operacion)
values
(now(),session_user(),OLD.ruta_facsimil,'se borra dato');
end;
//

